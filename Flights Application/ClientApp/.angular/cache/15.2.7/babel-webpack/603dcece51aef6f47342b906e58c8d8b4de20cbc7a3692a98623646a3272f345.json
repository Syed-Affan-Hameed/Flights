{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { bookFlight } from '../fn/flight/book-flight';\nimport { cancelBookingFlight } from '../fn/flight/cancel-booking-flight';\nimport { findFlight } from '../fn/flight/find-flight';\nimport { findFlight$Plain } from '../fn/flight/find-flight-plain';\nimport { searchFlight } from '../fn/flight/search-flight';\nimport { searchFlight$Plain } from '../fn/flight/search-flight-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain$Response(params, context) {\n    return searchFlight$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain(params, context) {\n    return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Response(params, context) {\n    return searchFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight(params, context) {\n    return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `bookFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight$Response(params, context) {\n    return bookFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight(params, context) {\n    return this.bookFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `cancelBookingFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `cancelBookingFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  cancelBookingFlight$Response(params, context) {\n    return cancelBookingFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `cancelBookingFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  cancelBookingFlight(params, context) {\n    return this.cancelBookingFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain$Response(params, context) {\n    return findFlight$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain(params, context) {\n    return this.findFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Response(params, context) {\n    return findFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight(params, context) {\n    return this.findFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.BookFlightPath = '/Flight';\nFlightService.CancelBookingFlightPath = '/Flight';\nFlightService.FindFlightPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","BaseService","bookFlight","cancelBookingFlight","findFlight","findFlight$Plain","searchFlight","searchFlight$Plain","FlightService","constructor","config","http","searchFlight$Plain$Response","params","context","rootUrl","pipe","r","body","searchFlight$Response","bookFlight$Response","cancelBookingFlight$Response","findFlight$Plain$Response","findFlight$Response","SearchFlightPath","BookFlightPath","CancelBookingFlightPath","FindFlightPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\AngularProjects\\Flights Application\\Flights Application\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { bookFlight } from '../fn/flight/book-flight';\r\nimport { BookFlight$Params } from '../fn/flight/book-flight';\r\nimport { cancelBookingFlight } from '../fn/flight/cancel-booking-flight';\r\nimport { CancelBookingFlight$Params } from '../fn/flight/cancel-booking-flight';\r\nimport { findFlight } from '../fn/flight/find-flight';\r\nimport { FindFlight$Params } from '../fn/flight/find-flight';\r\nimport { findFlight$Plain } from '../fn/flight/find-flight-plain';\r\nimport { FindFlight$Plain$Params } from '../fn/flight/find-flight-plain';\r\nimport { FlightRm } from '../models/flight-rm';\r\nimport { searchFlight } from '../fn/flight/search-flight';\r\nimport { SearchFlight$Params } from '../fn/flight/search-flight';\r\nimport { searchFlight$Plain } from '../fn/flight/search-flight-plain';\r\nimport { SearchFlight$Plain$Params } from '../fn/flight/search-flight-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchFlight()` */\r\n  static readonly SearchFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain$Response(params?: SearchFlight$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return searchFlight$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain(params?: SearchFlight$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.searchFlight$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Response(params?: SearchFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return searchFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight(params?: SearchFlight$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.searchFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `bookFlight()` */\r\n  static readonly BookFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight$Response(params?: BookFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return bookFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight(params?: BookFlight$Params, context?: HttpContext): Observable<void> {\r\n    return this.bookFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `cancelBookingFlight()` */\r\n  static readonly CancelBookingFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `cancelBookingFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  cancelBookingFlight$Response(params?: CancelBookingFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return cancelBookingFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `cancelBookingFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  cancelBookingFlight(params?: CancelBookingFlight$Params, context?: HttpContext): Observable<void> {\r\n    return this.cancelBookingFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findFlight()` */\r\n  static readonly FindFlightPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain$Response(params: FindFlight$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return findFlight$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain(params: FindFlight$Plain$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.findFlight$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Response(params: FindFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return findFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight(params: FindFlight$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.findFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}